{"version":3,"sources":["custom-variation.js","faculty-modal.js","gf-checkbox-label-span.js","gf-strong-before-colon.js","menu-toggle.js","navigation.js","reset-variations.js","test.js"],"names":["document","addEventListener","productContainer","querySelector","classList","add","courseTypeSelect","options","Array","from","tabsContainer","createElement","forEach","option","optionValue","value","tab","textContent","setAttribute","appendChild","parentNode","insertBefore","nextSibling","style","position","width","height","padding","margin","overflow","clip","border","dispatchEvent","Event","bubbles","event","target","contains","getAttribute","querySelectorAll","remove","console","log","button","modalId","this","closest","dataset","modal","getElementById","display","body","setTimeout","visibility","opacity","el","e","key","window","onload","label","span","text","colonIndex","indexOf","beforeColon","substring","trim","afterColon","innerHTML","toggleButton","mainMenu","utilityMenu","menuIsOpen","toggle","item","expanded","String","link","preventDefault","parent","breadcrumb","openItem","siteNavigation","getElementsByTagName","menu","links","linksWithChildren","toggleFocus","type","self","tagName","toLowerCase","menuItem","children","resetLink","MutationObserver","observe","attributes","attributeFilter"],"mappings":"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","file":"scripts.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n    // Add a parent class to the variations form for scoping the styles\n    var productContainer = document.querySelector('form.variations_form');\n    if (!productContainer) return;\n\n    productContainer.classList.add('course-variation');\n\n    // Convert Course Type to Tabs (Radio Buttons)\n    var courseTypeSelect = productContainer.querySelector('select[name=\"attribute_course-type\"]');\n    if (!courseTypeSelect) return;\n\n    var options = Array.from(courseTypeSelect.options);\n    var tabsContainer = document.createElement('div');\n    tabsContainer.classList.add('course-type-tabs');\n\n    options.forEach(function (option) {\n        var optionValue = option.value;\n        if (optionValue) {\n            var tab = document.createElement('div');\n            tab.classList.add('course-type-tab');\n            tab.textContent = option.textContent;\n            tab.setAttribute('data-value', optionValue);\n            tabsContainer.appendChild(tab);\n        }\n    });\n\n    // Insert tabsContainer after the courseTypeSelect dropdown\n    courseTypeSelect.parentNode.insertBefore(tabsContainer, courseTypeSelect.nextSibling);\n\n    // Hide the original select visually, but keep it in the DOM\n    courseTypeSelect.style.position = 'absolute';\n    courseTypeSelect.style.width = '1px';\n    courseTypeSelect.style.height = '1px';\n    courseTypeSelect.style.padding = '0';\n    courseTypeSelect.style.margin = '-1px';\n    courseTypeSelect.style.overflow = 'hidden';\n    courseTypeSelect.style.clip = 'rect(0, 0, 0, 0)';\n    courseTypeSelect.style.border = '0';\n\n    // Clear the initial selection (no tab selected by default)\n    courseTypeSelect.value = '';\n    courseTypeSelect.dispatchEvent(new Event('change', { bubbles: true }));\n\n    // Tab click handler\n    tabsContainer.addEventListener('click', function (event) {\n        if (event.target.classList.contains('course-type-tab')) {\n            var value = event.target.getAttribute('data-value');\n            courseTypeSelect.value = value;\n            courseTypeSelect.dispatchEvent(new Event('change', { bubbles: true }));\n\n            // Highlight selected tab\n            tabsContainer.querySelectorAll('.course-type-tab').forEach(function (tab) {\n                tab.classList.remove('selected');\n            });\n            event.target.classList.add('selected');\n        }\n    });\n\n    // Optional: Log the change for debugging\n    courseTypeSelect.addEventListener('change', function () {\n        console.log('Course type changed:', courseTypeSelect.value);\n    });\n});\n","document.addEventListener('DOMContentLoaded', function () {\n    // Open modal\n    document.querySelectorAll('.faculty-member__trigger').forEach(button => {\n        button.addEventListener('click', function () {\n            const modalId = this.closest('.faculty-member').dataset.modalId;\n            const modal = document.getElementById(modalId);\n\n            if (modal) {\n                modal.style.display = 'flex'; // Ensure the modal is visible\n                document.body.style.overflow = 'hidden'; // Prevent background scroll\n\n                setTimeout(() => {\n                    modal.querySelector('.faculty-modal__content').classList.add('visible'); // Trigger fade-in animation\n                    modal.style.visibility = 'visible'; // Ensure visibility is set\n                    modal.style.opacity = 1; // Fade-in the modal\n                }, 10); // Small delay to trigger transition\n            }\n        });\n    });\n\n    // Close modal\n    document.querySelectorAll('[data-modal-close]').forEach(el => {\n        el.addEventListener('click', function () {\n            const modal = this.closest('.faculty-modal');\n            modal.querySelector('.faculty-modal__content').classList.remove('visible'); // Hide modal with animation\n            modal.style.opacity = 0; // Fade-out the modal\n            modal.style.visibility = 'hidden'; // Hide modal after animation completes\n            document.body.style.overflow = ''; // Re-enable background scroll\n\n            setTimeout(() => modal.style.display = 'none', 300); // Wait for animation to finish\n        });\n    });\n\n    // Optional: Close on Escape key\n    document.addEventListener('keydown', function (e) {\n        if (e.key === 'Escape') {\n            document.querySelectorAll('.faculty-modal:not([style*=\"display: none\"])').forEach(modal => {\n                modal.querySelector('.faculty-modal__content').classList.remove('visible');\n                modal.style.opacity = 0;\n                modal.style.visibility = 'hidden';\n                document.body.style.overflow = ''; // Re-enable scroll\n                setTimeout(() => modal.style.display = 'none', 300);\n            });\n        }\n    });\n});\n","window.onload = function () {\n    const labels = document.querySelectorAll('.ginput_container_checkbox label');\n    labels.forEach(function (label) {\n      console.log(\"label\");\n      const span = document.createElement('span');\n      span.textContent = label.textContent;\n      label.textContent = ''; // Clear existing text\n      label.appendChild(span);\n    });\n  };\n  ","document.addEventListener('DOMContentLoaded', function () {\n    const labels = document.querySelectorAll('.ginput_container_checkbox label');\n    labels.forEach(function (label) {\n      const text = label.textContent;\n      const colonIndex = text.indexOf(':');\n      if (colonIndex !== -1) {\n        const beforeColon = text.substring(0, colonIndex).trim();\n        const afterColon = text.substring(colonIndex);\n        label.innerHTML = `<strong>${beforeColon}</strong>${afterColon}`;\n      }\n    });\n  });\n  ","// document.addEventListener('DOMContentLoaded', () => {\n//   const toggleButton = document.querySelector('.site-header__menu-toggle');\n//   const mainMenu = document.querySelector('#main-menu');\n//   const utilityMenu = document.querySelector('.site-header__utility-menu--mobile #header-utility-menu');\n\n//   if (toggleButton && mainMenu && utilityMenu) {\n//     toggleButton.addEventListener('click', () => {\n//       console.log(\"clicked\");\n//       mainMenu.classList.toggle('is-open');\n//       utilityMenu.classList.toggle('is-open');\n//       toggleButton.classList.toggle('is-open');\n//       document.body.classList.toggle('menu-is-open');\n\n//       // Accessibility toggle attributes\n//       const expanded = toggleButton.getAttribute('aria-expanded') === 'true';\n//       toggleButton.setAttribute('aria-expanded', String(!expanded));\n//       mainMenu.setAttribute('aria-hidden', String(expanded));\n//       utilityMenu.setAttribute('aria-hidden', String(expanded));\n//     });\n\n//     // Initialize ARIA attributes\n//     toggleButton.setAttribute('aria-expanded', 'false');\n//     mainMenu.setAttribute('aria-hidden', 'true');\n//     utilityMenu.setAttribute('aria-hidden', 'true');\n//   }\n\n//   // Mega menu toggle for items with children\n//   const menuItems = document.querySelectorAll('#main-menu .menu-item.has-mega-menu > a');\n\n//   menuItems.forEach(link => {\n//     link.addEventListener('click', (e) => {\n//       // Optional: prevent default navigation if needed\n//       e.preventDefault();\n\n//       const parent = link.closest('.menu-item');\n\n//       console.log(parent);\n\n//       // Close other open mega menus (optional)\n//       document.querySelectorAll('#main-menu .menu-item.has-mega-menu.is-open').forEach(item => {\n//         if (item !== parent) {\n//           item.classList.remove('is-open');\n//         }\n//       });\n\n//       // Toggle this one\n//       parent.classList.toggle('is-open');\n//     });\n//   });\n\n//   // Breadcrumb behavior for mobile mega menu\n//   const breadcrumbs = document.querySelectorAll('.mega-menu__breadcrumb');\n\n//   breadcrumbs.forEach(breadcrumb => {\n//     breadcrumb.addEventListener('click', (e) => {\n//       e.preventDefault();\n\n//       // Find any open mega menu item and close it\n//       const openItem = document.querySelector('#main-menu .menu-item.has-mega-menu.is-open');\n//       if (openItem) {\n//         openItem.classList.remove('is-open');\n//       }\n//     });\n//   });  \n\n// });\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const toggleButton = document.querySelector('.site-header__menu-toggle');\n  const mainMenu = document.querySelector('#main-menu');\n  const utilityMenu = document.querySelector('.site-header__utility-menu--mobile #header-utility-menu');\n\n  if (toggleButton && mainMenu && utilityMenu) {\n    toggleButton.addEventListener('click', () => {\n      console.log(\"clicked\");\n\n      // Check if the menu is open\n      const menuIsOpen = mainMenu.classList.contains('is-open');\n\n      // Toggle the \"is-open\" class for the menus and button\n      mainMenu.classList.toggle('is-open', !menuIsOpen);\n      utilityMenu.classList.toggle('is-open', !menuIsOpen);\n      toggleButton.classList.toggle('is-open', !menuIsOpen);\n      document.body.classList.toggle('menu-is-open', !menuIsOpen);\n\n      // Now check if the menu is actually closed after the toggle\n      const menuIsNowOpen = mainMenu.classList.contains('is-open');\n\n      // If closing the menu, remove \"is-open\" from all elements with mega menus\n      if (!menuIsNowOpen) {\n        console.log(\"menu is closed\");\n        // Remove \"is-open\" from all menu items with mega menus\n        document.querySelectorAll('#main-menu .menu-item').forEach(item => {\n          console.log(\"Removing is-open from item:\", item);\n          item.classList.remove('is-open');\n        });\n      }\n\n      // Accessibility toggle attributes\n      const expanded = toggleButton.getAttribute('aria-expanded') === 'true';\n      toggleButton.setAttribute('aria-expanded', String(!expanded));\n      mainMenu.setAttribute('aria-hidden', String(expanded));\n      utilityMenu.setAttribute('aria-hidden', String(expanded));\n    });\n\n    // Initialize ARIA attributes\n    toggleButton.setAttribute('aria-expanded', 'false');\n    mainMenu.setAttribute('aria-hidden', 'true');\n    utilityMenu.setAttribute('aria-hidden', 'true');\n  }\n\n  // Mega menu toggle for items with children\n  const menuItems = document.querySelectorAll('#main-menu .menu-item.has-mega-menu > a');\n\n  menuItems.forEach(link => {\n    link.addEventListener('click', (e) => {\n      // Optional: prevent default navigation if needed\n      e.preventDefault();\n\n      const parent = link.closest('.menu-item');\n\n      // Close other open mega menus (optional)\n      document.querySelectorAll('#main-menu .menu-item.has-mega-menu.is-open').forEach(item => {\n        if (item !== parent) {\n          item.classList.remove('is-open');\n        }\n      });\n\n      // Toggle this one\n      parent.classList.toggle('is-open');\n    });\n  });\n\n  // Breadcrumb behavior for mobile mega menu\n  const breadcrumbs = document.querySelectorAll('.mega-menu__breadcrumb');\n\n  breadcrumbs.forEach(breadcrumb => {\n    breadcrumb.addEventListener('click', (e) => {\n      e.preventDefault();\n\n      // Find any open mega menu item and close it\n      const openItem = document.querySelector('#main-menu .menu-item.has-mega-menu.is-open');\n      if (openItem) {\n        openItem.classList.remove('is-open');\n      }\n    });\n  });\n});\n\n\n\n\n\n","/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\n\t// Return early if the navigation doesn't exist.\n\tif ( ! siteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = siteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button doesn't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = siteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tsiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}() );\n","document.addEventListener('DOMContentLoaded', function () {\n    const resetLink = document.querySelector('.reset_variations');\n  \n    const observer = new MutationObserver(() => {\n      if (resetLink.style.visibility === 'hidden') {\n        resetLink.style.display = 'none';\n      } else {\n        resetLink.style.display = 'inline'; // or 'block', depending on layout\n      }\n    });\n  \n    observer.observe(resetLink, { attributes: true, attributeFilter: ['style'] });\n  \n    // Trigger once on load\n    if (resetLink.style.visibility === 'hidden') {\n      resetLink.style.display = 'none';\n    }\n  });\n  ","console.log('test');"]}